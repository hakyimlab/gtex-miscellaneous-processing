---
definitions:
  command: "python3 /gpfs/data/im-lab/nas40t2/abarbeira/software/genomic_tools/genomic_tools/src/dap_on_study.py"
  template: dap_on_study.jinja

  copy_to_item: true

  default_arguments:
    job_memory: "8gb"
    job_walltime: "4:00:00"
    logs_folder: logs_dap

  submission:
    !PBSQueue
      jobs_folder: jobs
      job_name_key: job_name
      #fake_submission: true

  constants:
    dap_g: &DAP_G_K /gpfs/data/im-lab/nas40t2/abarbeira/software/dap/dap_src/dap-g
    intron_annotation: &INTRON_ANNOTATION_K /gpfs/data/im-lab/nas40t2/abarbeira/projects/gtex_v8/data/intron_gene_map_gtex/annotation_intron_gene_map_gtex.txt.gz
    output_folder: &OUTPUT resuls/dapg
    scratch_folder: &SCRATCH resuls/dapg
    torus_root: &TORUS /scratch/abarbeira3/v8_process/sqtl/torus/results/torus_prior
     #/scratch/abarbeira3/v8_process/torus/sqtl/results/torus_prior
    splicing_root: &SPLICING /gpfs/data/im-lab/nas40t2/abarbeira/projects/gtex_v8/data_formatting/model_training_to_parquet/results/splicing
    sub_batches: &SUB_BATCHES 40

    genotype_pattern: &GENOTYPE_PATTERN "/scratch/abarbeira3/data/parquet/parquet_eur_maf0.01_biallelic/gtex_v8_eur_itm.chr{chromosome}.variants.parquet"
    genotype_metadata: &GENOTYPE_METADATA "/scratch/abarbeira3/data/parquet/parquet_eur_maf0.01_biallelic/gtex_v8_eur_itm.variants_metadata.parquet"
    #genotype_metadata: &GENOTYPE_METADATA /gpfs/data/im-lab/nas40t2/abarbeira/projects/gtex_v8/data_formatting/model_training_to_parquet/results/parquet/gtex_v8_eur_itm.variants_metadata.parquet
    whitelist: &WHITE_LIST /gpfs/data/im-lab/nas40t2/abarbeira/projects/gtex_v8/data/tissues_b.txt
  #Kind of ugly kink... need to add support for configurable inline template to pick up from configuration, to avoid duplicating "results"
  pre_command:
  - '([ -d results/dapg_maf0.01_w1000000 ] || mkdir -p results/dapg_maf0.01_w1000000) && ([ -d scratch_dapg ] || mkdir -p scratch_dapg)'

sub_configuration:
  -
    how: before_arguments
    path: dap_sqtl_job_spec.yaml

arguments:
  - !Scalar { name: dap_command, prefix: "-dap_command", value: *DAP_G_K }

  - !Scalar { name: frequency_filter, prefix: "-frequency_filter", value: 0.01,
    metadata_rules: [ !SaveValueInMetadata {path: "parameters/af"} ] }

  - !Scalar { name: options, prefix: -options, value: "ld_control 0.75" }

  - !Scalar { name: gene_annotation, prefix: "-gene_annotation", value: *INTRON_ANNOTATION_K }

########################################################################################################################

  - !Range { name: chromosome, prefix: "-chromosome", start: 1, end: 23,
    metadata_rules: [ !SaveValueInMetadata {path: "job/chromosome"} ] }

  - !ArgumentFromMetadata { name: genotype, prefix: "-parquet_genotype", format_rule: *GENOTYPE_PATTERN,
    sources: [ {path: "job/chromosome", destination: chromosome}] }

#  - !Scalar { name: window, prefix: "-window", value: "1000000",
#    metadata_rules: [ !SaveValueInMetadata {path: "parameters/window"} ] }

  - !Scalar { name: genotype_metadata, prefix: "-parquet_genotype_metadata", value: *GENOTYPE_METADATA }

  - !Scalar { name: window, prefix: "-window", value: "1000000",
    metadata_rules: [ !SaveValueInMetadata {path: "parameters/window"} ] }

  - !Scalar { name: parsimony, prefix: "-parsimony", value: "8" }

########################################################################################################################

  - !Scalar { name: sub_batches, prefix: "-sub_batches", value: *SUB_BATCHES }

  - !Range
    name: sub_batch
    prefix: "-sub_batch"
    start: 0
    end: *SUB_BATCHES
    metadata_rules: [ !SaveValueInMetadata {path: "job/sub_batch"} ]

  - !ArgumentFromMetadata
    name: job_key
    format_rule: "{chromosome}_{sub_batch}"
    sources: [
      {path: job/chromosome, destination: chromosome},
      {path: job/sub_batch, destination: sub_batch}
    ]
    metadata_rules: [ !SaveValueInMetadata {path: "job/key"} ]

  - !ArgumentFromMetadata
    name: job_memory
    options_from_metadata_path: __configuration/spec
    sub_key: memory
    sources: [ {path: job/key} ]

  - !ArgumentFromMetadata
    name: job_walltime
    options_from_metadata_path: __configuration/spec
    sub_key: walltime
    sources: [ {path: job/key} ]

########################################################################################################################

  - !FilesInFolder
    name: phenotype
    prefix: "-parquet_phenotype"
    sort: true
    folder: *SPLICING
    regexp_filter: "(.*).splicing.parquet"
    metadata_rules: [ !ExtractFromFileNameRegexpMetadata {path: tissue/name} ]

  - !Whitelist { name: "only_wb", from_list: ["Testis"], in_metadata_path: "tissue/name"}
  #- !Whitelist { list_from_file: *WHITE_LIST, in_metadata_path: "tissue/name" }

  - !ArgumentFromMetadata
    name: priors_folder
    prefix: "-priors_folder"
    prepend: *TORUS
    format_rule: "{tissue}.v8.sqtl/priors"
    sources: [ {path: tissue/name, destination: tissue} ]

  - !ArgumentFromMetadata
    name: intermediate_folder
    prefix: "-intermediate_folder"
    prepend: "scratch_dapg"
    format_rule: "{tissue}_chr{chromosome}_{sub_batch}"
    sources: [
      {path: tissue/name, destination: tissue},
      {path: job/chromosome, destination: chromosome},
      {path: job/sub_batch, destination: sub_batch}
    ]

  - !ArgumentFromMetadata
    name: output
    prefix: "-output_folder"
    prepend: "results/dapg_maf{af}_w{window}"
    format_rule: "{tissue}_chr{chromosome}_{sub_batch}"
    sources: [
      {path: tissue/name, destination: tissue},
      {path: job/chromosome, destination: chromosome},
      {path: parameters/window, destination: window},
      {path: parameters/af, destination: af},
      {path: job/sub_batch, destination: sub_batch}
    ]

  - !ArgumentFromMetadata
    name: "job_name"
    format_rule: "{tissue}_chr{chromosome}_{sub_batch}_gtexv8_dapg_sqtl"
    sources:
    sources: [
      {path: tissue/name, destination: tissue},
      {path: job/chromosome, destination: chromosome},
      {path: job/sub_batch, destination: sub_batch}
    ]
